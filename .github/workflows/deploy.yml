name: Deploy to Production

on:
  push:
    branches: [ "main" ]

concurrency:
  group: production-deployment
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version info
        id: version
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          VERSION="prod-${SHORT_SHA}-${TIMESTAMP}"
          
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and Push Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ahnco/eventitta:${{ steps.version.outputs.version }}
          cache-from: type=registry,ref=ahnco/eventitta:buildcache
          cache-to: type=registry,ref=ahnco/eventitta:buildcache,mode=max
          provenance: false

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          DEPLOY_MODE: tag
          IMAGE_TAG: ${{ steps.version.outputs.version }}
          IMAGE_DIGEST: ${{ steps.docker_build.outputs.digest }}
          ACTOR: ${{ github.actor }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
          FILE_STORAGE_LOCATION: ${{ secrets.FILE_STORAGE_LOCATION }}
          LOG_FILE_PATH: ${{ secrets.LOG_FILE_PATH }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_USERNAME: ${{ secrets.SLACK_USERNAME }}
          SLACK_TIMEOUT: ${{ secrets.SLACK_TIMEOUT }}
          RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          JDBC_USERNAME: ${{ secrets.JDBC_USERNAME }}
          JDBC_PASSWORD: ${{ secrets.JDBC_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_ACCESS_TOKEN_VALIDITY: ${{ secrets.JWT_ACCESS_TOKEN_VALIDITY }}
          JWT_REFRESH_TOKEN_VALIDITY: ${{ secrets.JWT_REFRESH_TOKEN_VALIDITY }}
          SEOUL_API_KEY: ${{ secrets.SEOUL_API_KEY }}
          NATIONAL_API_KEY: ${{ secrets.NATIONAL_API_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GEOCODING_CONTACT_EMAIL: ${{ secrets.GEOCODING_CONTACT_EMAIL }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT || 22 }}
          script_stop: true
          command_timeout: 30m
          envs: DEPLOY_MODE,IMAGE_TAG,IMAGE_DIGEST,ACTOR,SERVER_PORT,REMOTE_DIR,FILE_STORAGE_LOCATION,LOG_FILE_PATH,SLACK_CHANNEL,SLACK_USERNAME,SLACK_TIMEOUT,RDS_ENDPOINT,DB_NAME,JDBC_USERNAME,JDBC_PASSWORD,JWT_SECRET,JWT_ACCESS_TOKEN_VALIDITY,JWT_REFRESH_TOKEN_VALIDITY,SEOUL_API_KEY,NATIONAL_API_KEY,AWS_REGION,S3_BUCKET_NAME,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,SLACK_WEBHOOK_URL,GEOCODING_CONTACT_EMAIL
          script: |
            #!/bin/bash
            set -e
            
            # 디버깅을 위한 초기 확인
            echo "========================================="
            echo "🚀 Starting Production Deployment"
            echo "========================================="
            echo "Current directory: $(pwd)"
            echo "User: $(whoami)"
            
            # 환경 변수 확인 (중요 변수만)
            if [ -z "$IMAGE_TAG" ]; then
              echo "❌ ERROR: IMAGE_TAG is empty"
              exit 1
            fi
            
            if [ -z "$REMOTE_DIR" ]; then
              echo "❌ ERROR: REMOTE_DIR is empty"
              REMOTE_DIR="~/eventitta"
              echo "⚠️ Using default REMOTE_DIR: $REMOTE_DIR"
            fi
            
            if [ -z "$SERVER_PORT" ]; then
              SERVER_PORT="8080"
              echo "⚠️ Using default SERVER_PORT: $SERVER_PORT"
            fi
            
            echo "Deploy Mode: $DEPLOY_MODE"
            echo "Version: $IMAGE_TAG"
            echo "Digest: $IMAGE_DIGEST"
            echo "Deployed by: $ACTOR"
            echo "Server Port: $SERVER_PORT"
            echo "Remote Dir: $REMOTE_DIR"
            echo "Time: $(date '+%Y-%m-%d %H:%M:%S')"
            echo ""
            
            # 디렉토리 생성 및 이동
            mkdir -p "$REMOTE_DIR"
            cd "$REMOTE_DIR"
            echo "✅ Changed to directory: $(pwd)"
            echo ""
            
            # Docker 이미지 설정
            if [ "$DEPLOY_MODE" = "digest" ] && [ -n "$IMAGE_DIGEST" ]; then
              APP_IMAGE="ahnco/eventitta@${IMAGE_DIGEST}"
              echo "🔒 Using digest-based deployment"
            else
              APP_IMAGE="ahnco/eventitta:${IMAGE_TAG}"
              echo "🏷️ Using tag-based deployment"
            fi
            echo "📦 Target image: $APP_IMAGE"
            echo ""
            
            # .env 파일 생성
            echo "📝 Creating .env file..."
            cat > .env << EOF
            APP_IMAGE=$APP_IMAGE
            SERVER_PORT=$SERVER_PORT
            FILE_STORAGE_LOCATION=$FILE_STORAGE_LOCATION
            LOG_FILE_PATH=$LOG_FILE_PATH
            SLACK_CHANNEL=$SLACK_CHANNEL
            SLACK_USERNAME=$SLACK_USERNAME
            SLACK_TIMEOUT=$SLACK_TIMEOUT
            EOF
            chmod 600 .env
            echo "✅ .env file created"
            
            # .env.secrets 파일 생성
            echo "📝 Creating .env.secrets file..."
            cat > .env.secrets << EOF
            RDS_ENDPOINT=$RDS_ENDPOINT
            DB_NAME=$DB_NAME
            JDBC_USERNAME=$JDBC_USERNAME
            JDBC_PASSWORD=$JDBC_PASSWORD
            JWT_SECRET=$JWT_SECRET
            JWT_ACCESS_TOKEN_VALIDITY=$JWT_ACCESS_TOKEN_VALIDITY
            JWT_REFRESH_TOKEN_VALIDITY=$JWT_REFRESH_TOKEN_VALIDITY
            SEOUL_API_KEY=$SEOUL_API_KEY
            NATIONAL_API_KEY=$NATIONAL_API_KEY
            AWS_REGION=$AWS_REGION
            S3_BUCKET_NAME=$S3_BUCKET_NAME
            AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            SLACK_WEBHOOK_URL=$SLACK_WEBHOOK_URL
            GEOCODING_CONTACT_EMAIL=$GEOCODING_CONTACT_EMAIL
            EOF
            chmod 400 .env.secrets
            echo "✅ .env.secrets file created"
            echo ""
            
            # Docker 이미지 pull
            echo "⬇️ Pulling image from Docker Hub..."
            if ! docker pull "$APP_IMAGE"; then
              echo "❌ Failed to pull Docker image"
              exit 1
            fi
            echo "✅ Image pulled successfully"
            echo ""
            
            # Docker Compose 버전 확인
            if docker compose version >/dev/null 2>&1; then
              DOCKER_COMPOSE="docker compose"
              echo "✅ Using Docker Compose V2"
            elif command -v docker-compose >/dev/null 2>&1; then
              DOCKER_COMPOSE="docker-compose"
              echo "✅ Using Docker Compose V1"
            else
              echo "❌ Docker Compose not found"
              exit 1
            fi
            
            # 기존 컨테이너 중지 (있는 경우)
            echo "🔄 Stopping existing containers..."
            $DOCKER_COMPOSE down 2>/dev/null || true
            
            # 새 버전 배포
            export APP_IMAGE
            echo "🔄 Deploying new version..."
            if ! $DOCKER_COMPOSE up -d --force-recreate; then
              echo "❌ Failed to start container"
              docker logs eventitta-app --tail 100 2>&1 || true
              exit 1
            fi
            
            # 헬스 체크
            echo "⏳ Performing health check..."
            HEALTH_CHECK_PASSED=false
            MAX_ATTEMPTS=40
            SLEEP_BETWEEN=3
            AFTER_START_WAIT=5
            
            for i in $(seq 1 $MAX_ATTEMPTS); do
              sleep "$SLEEP_BETWEEN"
              
              # 컨테이너 상태 확인
              if ! docker ps --filter "name=eventitta-app" --filter "status=running" -q | grep -q .; then
                echo "❌ Container not running (attempt $i/$MAX_ATTEMPTS)"
                docker logs eventitta-app --tail 100 2>&1 || true
                break
              fi
              
              # Spring Boot 시작 확인
              if docker logs eventitta-app 2>&1 | grep -qi "Started.*Application"; then
                echo "✅ Spring Boot application started! (attempt $i/$MAX_ATTEMPTS)"
                sleep "$AFTER_START_WAIT"
                
                # HTTP 엔드포인트 확인
                HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${SERVER_PORT}/" 2>/dev/null || echo "000")
                if [ "$HTTP_CODE" != "000" ]; then
                  echo "✅ HTTP endpoint responding with code: $HTTP_CODE"
                  HEALTH_CHECK_PASSED=true
                  break
                fi
              fi
              
              echo "⏳ Waiting for application... (attempt $i/$MAX_ATTEMPTS)"
            done
            
            echo ""
            if [ "$HEALTH_CHECK_PASSED" = true ]; then
              echo "$APP_IMAGE" > .current_image
              echo "========================================="
              echo "✅ Deployment Successful!"
              echo "========================================="
              docker ps --filter "name=eventitta-app" --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
            else
              echo "========================================="
              echo "❌ Deployment Failed!"
              echo "========================================="
              echo "Container logs:"
              docker logs eventitta-app --tail 200 2>&1 || true
              echo ""
              echo "Container status:"
              docker ps -a --filter "name=eventitta-app"
              
              # 롤백 시도
              if [ -f .current_image ]; then
                PREVIOUS_IMAGE=$(cat .current_image || true)
                if [ -n "$PREVIOUS_IMAGE" ]; then
                  echo ""
                  echo "🔄 Attempting rollback to: $PREVIOUS_IMAGE"
                  export APP_IMAGE="$PREVIOUS_IMAGE"
                  docker pull "$PREVIOUS_IMAGE" 2>/dev/null || true
                  $DOCKER_COMPOSE up -d --force-recreate
                  echo "⚠️ Rollback completed. Please check the service."
                fi
              fi
              exit 1
            fi
