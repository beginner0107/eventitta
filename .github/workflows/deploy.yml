name: Deploy to Production

on:
  push:
    branches: [ "main" ]

concurrency:
  group: production-deployment
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version info
        id: version
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          VERSION="prod-${SHORT_SHA}-${TIMESTAMP}"

          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and Push Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ahnco/eventitta:${{ steps.version.outputs.version }}
          cache-from: type=registry,ref=ahnco/eventitta:buildcache
          cache-to: type=registry,ref=ahnco/eventitta:buildcache,mode=max
          provenance: false

      - name: Display build info
        run: |
          echo "✅ Successfully pushed image"
          echo "📦 Image: ahnco/eventitta:${{ steps.version.outputs.version }}"
          echo "🔒 Digest: ${{ steps.docker_build.outputs.digest }}"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_TAG: ${{ steps.version.outputs.version }}
          IMAGE_DIGEST: ${{ steps.docker_build.outputs.digest }}
          DEPLOY_MODE: ${{ vars.DEPLOY_MODE || 'tag' }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script_stop: true
          command_timeout: 10m
          envs: IMAGE_TAG,IMAGE_DIGEST,DEPLOY_MODE
          script: |
            set -euo pipefail

            echo "========================================="
            echo "🚀 Starting Production Deployment"
            echo "========================================="
            echo "Deploy Mode: $DEPLOY_MODE"
            echo "Version: $IMAGE_TAG"
            echo "Digest: $IMAGE_DIGEST"
            echo "Commit: ${{ steps.version.outputs.short_sha }}"
            echo "Deployed by: ${{ github.actor }}"
            echo "Time: $(date '+%Y-%m-%d %H:%M:%S')"
            echo ""

            cd ~/eventitta

            # 배포 이력 저장
            echo "$IMAGE_TAG|$IMAGE_DIGEST|$(date '+%Y-%m-%d %H:%M:%S')" >> .deploy_history
            tail -100 .deploy_history > .deploy_history.tmp && mv .deploy_history.tmp .deploy_history

            # 현재 버전 백업
            PREVIOUS_IMAGE=""
            if [ -f .current_image ]; then
              PREVIOUS_IMAGE=$(cat .current_image)
              echo "📦 Previous image: $PREVIOUS_IMAGE"
            fi

            # 현재 실행 중인 컨테이너 확인
            echo "📦 Current running container:"
            docker ps --filter "name=eventitta-app" --format "table {{.Names}}\t{{.Image}}\t{{.Status}}" || echo "No container running"
            echo ""

            # ✅ 배포할 이미지 결정 (태그 vs 다이제스트)
            if [ "$DEPLOY_MODE" = "digest" ]; then
              APP_IMAGE="ahnco/eventitta@${IMAGE_DIGEST}"
              echo "🔒 Using digest-based deployment for maximum reproducibility"
            else
              APP_IMAGE="ahnco/eventitta:${IMAGE_TAG}"
              echo "🏷️  Using tag-based deployment"
            fi

            echo "📦 Target image: $APP_IMAGE"
            echo ""

            # .env 파일 생성 (heredoc 변수 치환 처리)
            echo "📝 Creating .env file..."

            # ✅ heredoc 따옴표 없이 사용하여 변수 확장 허용
            cat > .env.tmp << EOF
            # --- Docker Image ---
            APP_IMAGE=${APP_IMAGE}

            # --- Server ---
            SERVER_PORT=${{ secrets.SERVER_PORT }}

            # --- File Upload ---
            FILE_STORAGE_LOCATION=${{ secrets.FILE_STORAGE_LOCATION }}

            # --- Logging ---
            LOG_FILE_PATH=${{ secrets.LOG_FILE_PATH }}

            # --- Slack Notifications ---
            SLACK_CHANNEL=${{ secrets.SLACK_CHANNEL }}
            SLACK_USERNAME=${{ secrets.SLACK_USERNAME }}
            SLACK_TIMEOUT=${{ secrets.SLACK_TIMEOUT }}
            EOF

            mv .env.tmp .env
            chmod 600 .env

            # 민감한 정보는 별도 파일
            cat > .env.secrets.tmp << EOF
            # --- Database (RDS) ---
            RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}
            DB_NAME=${{ secrets.DB_NAME }}
            JDBC_USERNAME=${{ secrets.JDBC_USERNAME }}
            JDBC_PASSWORD=${{ secrets.JDBC_PASSWORD }}

            # --- JWT ---
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_ACCESS_TOKEN_VALIDITY=${{ secrets.JWT_ACCESS_TOKEN_VALIDITY }}
            JWT_REFRESH_TOKEN_VALIDITY=${{ secrets.JWT_REFRESH_TOKEN_VALIDITY }}

            # --- Open API Keys ---
            SEOUL_API_KEY=${{ secrets.SEOUL_API_KEY }}
            NATIONAL_API_KEY=${{ secrets.NATIONAL_API_KEY }}

            # --- AWS S3 ---
            AWS_REGION=${{ secrets.AWS_REGION }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

            # --- Slack Webhook ---
            SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}

            # --- Geo Coding ---
            GEOCODING_CONTACT_EMAIL=${{ secrets.GEOCODING_CONTACT_EMAIL }}
            EOF

            mv .env.secrets.tmp .env.secrets
            chmod 400 .env.secrets

            echo "✅ Environment files created"
            echo ""

            # 이미지 Pull
            echo "⬇️  Pulling image from Docker Hub..."
            docker pull $APP_IMAGE
            echo "✅ Image pulled successfully"
            echo ""

            # ✅ docker compose 사용 (V2)
            # docker-compose.yml에서 ${APP_IMAGE} 변수 사용
            export APP_IMAGE

            # 컨테이너 재시작
            echo "🔄 Deploying new version..."
            docker compose up -d --force-recreate
            echo ""

            # 헬스체크
            echo "⏳ Performing health check..."
            HEALTH_CHECK_PASSED=false
            MAX_ATTEMPTS=40

            for i in $(seq 1 $MAX_ATTEMPTS); do
              sleep 3

              # 컨테이너가 실행 중인지 확인
              if ! docker ps --filter "name=eventitta-app" --filter "status=running" -q | grep -q .; then
                echo "❌ Container stopped unexpectedly!"
                echo ""
                echo "📝 Container logs:"
                docker logs eventitta-app --tail 100 2>&1 || true
                break
              fi

              # Spring Boot 시작 완료 확인
              if docker logs eventitta-app 2>&1 | grep -qi "Started.*Application"; then
                echo "✅ Spring Boot application started! (attempt $i/$MAX_ATTEMPTS)"
                sleep 5

                # HTTP 응답 확인
                HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${SERVER_PORT:-8080}/ 2>/dev/null || echo "000")

                if [ "$HTTP_CODE" != "000" ]; then
                  echo "✅ HTTP endpoint responding with code: $HTTP_CODE"
                  HEALTH_CHECK_PASSED=true
                  break
                fi
              fi

              echo "⏳ Waiting for application... (attempt $i/$MAX_ATTEMPTS)"
            done

            echo ""

            # 결과 처리
            if [ "$HEALTH_CHECK_PASSED" = true ]; then
              # 현재 이미지 저장
              echo "$APP_IMAGE" > .current_image

              echo "========================================="
              echo "✅ Deployment Successful!"
              echo "========================================="
              echo "Image: $APP_IMAGE"
              echo "Version: $IMAGE_TAG"
              echo "Digest: $IMAGE_DIGEST"
              echo ""
              echo "📊 Container Status:"
              docker ps --filter "name=eventitta-app" --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
              echo ""
              echo "📝 Recent Logs (last 30 lines):"
              docker logs eventitta-app --tail 30
              echo ""
              echo "🎉 Production is now running: $APP_IMAGE"

              # 이전 이미지 정리 (최근 5개만 유지)
              echo ""
              echo "🧹 Cleaning up old images..."
              docker images ahnco/eventitta --format "{{.Tag}}" \
                | grep "^prod-" \
                | sort -r \
                | tail -n +6 \
                | xargs -r -I {} docker rmi ahnco/eventitta:{} 2>/dev/null || true

            else
              echo "========================================="
              echo "❌ Deployment Failed!"
              echo "========================================="
              echo ""
              echo "📝 Full Container Logs:"
              docker logs eventitta-app --tail 200 2>&1 || true
              echo ""
              echo "📊 Container Status:"
              docker ps -a --filter "name=eventitta-app"
              echo ""

              # ✅ 롤백 (환경변수 기반)
              if [ -n "$PREVIOUS_IMAGE" ]; then
                echo "🔄 Attempting rollback to: $PREVIOUS_IMAGE"
                export APP_IMAGE="$PREVIOUS_IMAGE"

                # 이전 이미지 Pull
                docker pull $PREVIOUS_IMAGE 2>/dev/null || true

                # 롤백 실행
                docker compose up -d --force-recreate

                # 롤백 검증
                sleep 5
                if docker ps --filter "name=eventitta-app" --filter "status=running" -q | grep -q .; then
                  echo "✅ Rollback successful"
                  echo "Current image: $PREVIOUS_IMAGE"
                else
                  echo "❌ Rollback also failed - manual intervention required!"
                fi
              else
                echo "⚠️  No previous version available for rollback"
              fi

              exit 1
            fi
